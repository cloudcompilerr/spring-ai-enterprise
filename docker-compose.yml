version: '3.8'

services:
  # Spring AI Enterprise application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-ai-enterprise
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/spring_ai_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_COM_EXAMPLE_AI=DEBUG
    volumes:
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spring-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # PostgreSQL with pgvector extension
  postgres:
    image: ankane/pgvector:latest
    container_name: spring-ai-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=spring_ai_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - spring-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # PGAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: spring-ai-pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - spring-ai-network
    restart: unless-stopped

volumes:
  postgres-data:
  pgadmin-data:

networks:
  spring-ai-network:
    driver: bridge